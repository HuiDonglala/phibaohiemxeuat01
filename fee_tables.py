# -*- coding: utf-8 -*-
"""Bảo hiểm xe

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14erKJEgDHk3CMnR2YZ5I2sUJjkhfnVox

# Task
Tell me about this dataset.

Here is all the data you need:
"QUY TRINH VẬN HÀNH.xlsx"

## Data loading

### Subtask:
Load the Excel file "QUY TRINH VAN HANH.xlsx" into a pandas DataFrame.
"""

import pandas as pd
import re
from datetime import datetime

def to_float_or_none(x):
      try:
          return float(x)
      except:
          return None


from datetime import datetime

def parse_date(date_str):
    """Cố gắng chuyển đổi chuỗi ngày thành datetime theo nhiều định dạng phổ biến"""
    if not isinstance(date_str, str):
        return None

    date_str = date_str.strip().replace('\xa0', '').replace('\u200b', '').replace('\ufeff', '')

    # Các định dạng phổ biến ở Việt Nam và chuẩn quốc tế
    formats = [
        "%d/%m/%Y",     # 01/06/2020
        "%Y-%m-%d",     # 2020-06-01
        "%d-%m-%Y",     # 01-06-2020
        "%Y/%m/%d",     # 2020/06/01
        "%d.%m.%Y",     # 01.06.2020
    ]

    for fmt in formats:
        try:
            return datetime.strptime(date_str, fmt)
        except ValueError:
            continue

    return None

def parse_date(date_str):
    """Thử chuyển chuỗi ngày sang datetime theo nhiều định dạng"""
    date_str = str(date_str).strip().replace('\xa0', '').replace('\u200b', '').replace('\ufeff', '')
    formats = ["%d/%m/%Y", "%Y-%m-%d", "%d-%m-%Y", "%Y/%m/%d"]
    for fmt in formats:
        try:
            return datetime.strptime(date_str, fmt)
        except ValueError:
            continue
    return None

def format_currency(val):
    """Định dạng số có dấu phẩy ngăn cách hàng nghìn, bỏ qua NaN"""
    if isinstance(val, (int, float)) and pd.notnull(val):
        return f"{int(val):,}"
    return val

import pandas as pd


# Dữ liệu bảng tỷ lệ phí cho VNI
fee_rates_vni = pd.DataFrame([
    ["VNI", "Xe chở người", "Không KDVT", None, 400000000, None, 9, None, None, 0, 36, 1.55,['IDLXE_001', 'IDLXE_002']],
    ["VNI", "Xe chở người", "Không KDVT", None, 400000000, None, 9, None, None, 36, 72, 1.80,['IDLXE_001', 'IDLXE_002']],
    ["VNI", "Xe chở người", "Không KDVT", None, 400000000, None, 9, None, None, 72, 120, 2.10,['IDLXE_001', 'IDLXE_002']],
    ["VNI", "Xe chở người", "Không KDVT", 400000000, 600000000, None, 9, None, None, 0, 36, 1.40,['IDLXE_001', 'IDLXE_002']],
    ["VNI", "Xe chở người", "Không KDVT", 400000000, 600000000, None, 9, None, None, 36, 72, 1.50,['IDLXE_001', 'IDLXE_002']],
    ["VNI", "Xe chở người", "Không KDVT", 400000000, 600000000, None, 9, None, None, 72, 120, 1.65,['IDLXE_001', 'IDLXE_002']],
    ["VNI", "Xe chở người", "Không KDVT", 600000000, 800000000, None, 9, None, None, 0, 36, 1.25,['IDLXE_001', 'IDLXE_002']],
    ["VNI", "Xe chở người", "Không KDVT", 600000000, 800000000, None, 9, None, None, 36, 72, 1.35,['IDLXE_001', 'IDLXE_002']],
    ["VNI", "Xe chở người", "Không KDVT", 600000000, 800000000, None, 9, None, None, 72, 120, 1.50,['IDLXE_001', 'IDLXE_002']],
    ["VNI", "Xe chở người", "Không KDVT", 800000000, None, None, 9, None, None, 0, 36, 1.00,['IDLXE_001', 'IDLXE_002']],
    ["VNI", "Xe chở người", "Không KDVT", 800000000, None, None, 9, None, None, 36, 72, 1.10,['IDLXE_001', 'IDLXE_002']],
    ["VNI", "Xe chở người", "Không KDVT", 800000000, None, None, 9, None, None, 72, 120, 1.25,['IDLXE_001', 'IDLXE_002']],
    ["VNI", "Xe chở người", "Không KDVT", None, None, 9, None, None, None, 0, 36, 1.00,['IDLXE_001', 'IDLXE_002']],
    ["VNI", "Xe chở người", "Không KDVT", None, None, 9, None, None, None, 36, 72, 1.10,['IDLXE_001', 'IDLXE_002']],
    ["VNI", "Xe chở người", "Không KDVT", None, None, 9, None, None, None, 72, 120, 1.25,['IDLXE_001', 'IDLXE_002']],
    ["VNI", "Xe chở người/Xe taxi công nghệ", "KDVT", None, None, None, 9, None, None, 0, 36, 1.80,['IDLXE_016', 'IDLXE_019','IDLXE_020']],
    ["VNI", "Xe chở người/Xe taxi công nghệ", "KDVT", None, None, None, 9, None, None, 36, 72, 2.00,['IDLXE_016', 'IDLXE_019','IDLXE_020']],
    ["VNI", "Xe chở người/Xe taxi công nghệ", "KDVT", None, None, None, 9, None, None, 72, 120, 2.40,['IDLXE_016', 'IDLXE_019','IDLXE_020']],
    ["VNI", "Xe chở người/Xe bus nội tỉnh", "KDVT", None, None, 9, None, None, None, 0, 36, 1.10,['IDLXE_017']],
    ["VNI", "Xe chở người/Xe bus nội tỉnh", "KDVT", None, None, 9, None, None, None, 36, 72, 1.21,['IDLXE_017']],
    ["VNI", "Xe chở người/Xe bus nội tỉnh", "KDVT", None, None, 9, None, None, None, 72, 120, 1.32,['IDLXE_017']],
    ["VNI", "Xe khách/Xe bus liên tỉnh", "KDVT", None, None, None, None, None, None, 0, 36, 1.35,['IDLXE_015']],
    ["VNI", "Xe khách/Xe bus liên tỉnh", "KDVT", None, None, None, None, None, None, 36, 72, 1.50,['IDLXE_015']],
    ["VNI", "Xe khách/Xe bus liên tỉnh", "KDVT", None, None, None, None, None, None, 36, 72, 1.80,['IDLXE_015']],
    ["VNI", "Romooc", None, None, None, None, None, None, None, 0, 36, 0.66,['IDLXE_027', 'IDLXE_008']],
    ["VNI", "Romooc", None, None, None, None, None, None, None, 36, 72, 0.77,['IDLXE_027', 'IDLXE_008']],
    ["VNI", "Romooc", None, None, None, None, None, None, None, 72, 120, 0.88,['IDLXE_027', 'IDLXE_008']],
    ["VNI", "Romooc tự đổ", None, None, None, None, None, None, None, 0, 36, 1.50,['IDLXE_028', 'IDLXE_034']],
    ["VNI", "Romooc tự đổ", None, None, None, None, None, None, None, 36, 72, 1.60,['IDLXE_028', 'IDLXE_034']],
    ["VNI", "Romooc tự đổ", None, None, None, None, None, None, None, 72, 120, 1.80,['IDLXE_028', 'IDLXE_034']],
    ["VNI", "Xe đầu kéo; xe tải thùng đông lạnh/bảo ôn trên 3,5 tấn; xe hoạt động trong vùng khai thác khoáng sản", None, None, None, None, None, 3.5, 10, 0, 36, 1.65,['IDLXE_026', 'IDLXE_025', 'IDLXE_006', 'IDLXE_007']],
    ["VNI", "Xe đầu kéo; xe tải thùng đông lạnh/bảo ôn trên 3,5 tấn; xe hoạt động trong vùng khai thác khoáng sản", None, None, None, None, None, 3.5, 10, 36, 72, 1.76,['IDLXE_026', 'IDLXE_025', 'IDLXE_006', 'IDLXE_007']],
    ["VNI", "Xe đầu kéo; xe tải thùng đông lạnh/bảo ôn trên 3,5 tấn; xe hoạt động trong vùng khai thác khoáng sản", None, None, None, None, None, 3.5, 10, 72, 120, 1.87,['IDLXE_026', 'IDLXE_025', 'IDLXE_006', 'IDLXE_007']],
    ["VNI", "Xe tải/Xe chở hàng", None, None, None, None, None, 10, None, 0, 36, 1.21,['IDLXE_024', 'IDLXE_025', 'IDLXE_005', 'IDLXE_006']],
    ["VNI", "Xe tải/Xe chở hàng", None, None, None, None, None, 10, None, 36, 72, 1.32,['IDLXE_024', 'IDLXE_025', 'IDLXE_005', 'IDLXE_006']],
    ["VNI", "Xe tải/Xe chở hàng", None, None, None, None, None, 10, None, 72, 120, 1.43,['IDLXE_024', 'IDLXE_025', 'IDLXE_005', 'IDLXE_006']],
    ["VNI", "Xe tải/Xe chở hàng", None, None, None, None, None, None, None, 0, 36, 1.10,['IDLXE_024', 'IDLXE_025', 'IDLXE_005', 'IDLXE_006']],
    ["VNI", "Xe tải/Xe chở hàng", None, None, None, None, None, None, None, 36, 72, 1.23,['IDLXE_024', 'IDLXE_025', 'IDLXE_005', 'IDLXE_006']],
    ["VNI", "Xe tải/Xe chở hàng", None, None, None, None, None, None, None, 72, 120, 1.35,['IDLXE_024', 'IDLXE_025', 'IDLXE_005', 'IDLXE_006']],
    ["VNI", "Xe pickup", None, None, 500000001, None, None, None, None, 0, 36, 1.50,['IDLXE_022', 'IDLXE_023', 'IDLXE_003', 'IDLXE_004']],
    ["VNI", "Xe pickup", None, None, 500000001, None, None, None, None, 36, 72, 1.60,['IDLXE_022', 'IDLXE_023', 'IDLXE_003', 'IDLXE_004']],
    ["VNI", "Xe pickup", None, None, 500000001, None, None, None, None, 72, 120, 1.75,['IDLXE_022', 'IDLXE_023', 'IDLXE_003', 'IDLXE_004']],
    ["VNI", "Xe pickup", None, 500000001, None, None, None, None, None, 0, 36, 1.21,['IDLXE_022', 'IDLXE_023', 'IDLXE_003', 'IDLXE_004']],
    ["VNI", "Xe pickup", None, 500000001, None, None, None, None, None, 36, 72, 1.42,['IDLXE_022', 'IDLXE_023', 'IDLXE_003', 'IDLXE_004']],
    ["VNI", "Xe pickup", None, 500000001, None, None, None, None, None, 72, 120, 1.65,['IDLXE_022', 'IDLXE_023', 'IDLXE_003', 'IDLXE_004']],
    ["VNI", "Xe hoạt động trong nội bộ cảng, khu công nghiệp, sân bay", None, None, None, None, None, None, None, 0, 36, 1.00,['IDLXE_009', 'IDLXE_029', 'IDLXE_030', 'IDLXE_031', 'IDLXE_032', 'IDLXE_033']],
    ["VNI", "Xe hoạt động trong nội bộ cảng, khu công nghiệp, sân bay", None, None, None, None, None, None, None, 36, 72, 1.10,['IDLXE_009', 'IDLXE_029', 'IDLXE_030', 'IDLXE_031', 'IDLXE_032', 'IDLXE_033']],
    ["VNI", "Xe hoạt động trong nội bộ cảng, khu công nghiệp, sân bay", None, None, None, None, None, None, None, 72, 120, 1.21,['IDLXE_009', 'IDLXE_029', 'IDLXE_030', 'IDLXE_031', 'IDLXE_032', 'IDLXE_033']],
    ["VNI", "Xe biển xanh, biển đỏ, biển ngoại giao", None, None, None, None, None, None, None, 0, 36, 1.00,['IDLXE_100']],
    ["VNI", "Xe biển xanh, biển đỏ, biển ngoại giao", None, None, None, None, None, None, None, 36, 72, 1.10,['IDLXE_100']],
    ["VNI", "Xe biển xanh, biển đỏ, biển ngoại giao", None, None, None, None, None, None, None, 72, 120, 1.21,['IDLXE_100']],
], columns=[
    "Công ty bảo hiểm", "Nhóm xe", "Mục đích sử dụng", "Giá trị xe tối thiểu", "Giá trị xe tối đa",
    "Số chỗ tối thiểu", "Số chỗ tối đa", "Trọng tải tối thiểu", "Trọng tải tối đa",
    "Niên hạn tối thiểu", "Niên hạn tối đa", "Tỷ lệ phí (%)","IDL Code"
])

import pandas as pd

# Bước 1: Tạo cột phụ để sắp xếp mục đích sử dụng mà không làm mất dữ liệu gốc
fee_rates_vni["_MDS_sort"] = fee_rates_vni["Mục đích sử dụng"].fillna("")

# Bước 2: Thứ tự mục đích sử dụng mong muốn
muc_dich_order = ["Không KDVT", "KDVT", ""]

# Bước 3: Gán thứ tự cho cột phụ
fee_rates_vni["_MDS_sort"] = pd.Categorical(fee_rates_vni["_MDS_sort"], categories=muc_dich_order, ordered=True)

# Bước 4: Thứ tự nhóm xe theo input ban đầu
fee_rates_vni["Thứ tự nhóm xe"] = fee_rates_vni["Nhóm xe"].astype("category")
fee_rates_vni["Thứ tự nhóm xe"] = fee_rates_vni["Thứ tự nhóm xe"].cat.set_categories(
    fee_rates_vni["Nhóm xe"].unique(), ordered=True
)

# Bước 5: Chuẩn hóa để sắp xếp (dữ liệu số)
fee_rates_vni["Giá trị xe tối thiểu"] = pd.to_numeric(fee_rates_vni["Giá trị xe tối thiểu"], errors="coerce")
fee_rates_vni["Giá trị xe tối đa"] = pd.to_numeric(fee_rates_vni["Giá trị xe tối đa"], errors="coerce")
fee_rates_vni["Sort Giá trị xe tối thiểu"] = fee_rates_vni["Giá trị xe tối thiểu"].fillna(-999999999999999)
fee_rates_vni["Sort Giá trị xe tối đa"] = fee_rates_vni["Giá trị xe tối đa"].fillna(999999999999999)

fee_rates_vni["Missing Both MinMax"] = fee_rates_vni[["Giá trị xe tối thiểu", "Giá trị xe tối đa"]].isna().all(axis=1)
fee_rates_vni["Sort Số chỗ tối thiểu"] = pd.to_numeric(fee_rates_vni["Số chỗ tối thiểu"], errors="coerce").fillna(-999999999)
fee_rates_vni["Sort Trọng tải tối thiểu"] = pd.to_numeric(fee_rates_vni["Trọng tải tối thiểu"], errors="coerce").fillna(-999999999)

# Bước 6: Hàm format_range an toàn
def format_range(min_val, max_val, unit=""):
    try:
        if pd.notna(min_val) and pd.notna(max_val):
            return f"từ {int(float(min_val)):,}{unit} đến dưới {int(float(max_val)):,}{unit}"
        elif pd.notna(min_val):
            return f"từ {int(float(min_val)):,}{unit} trở lên"
        elif pd.notna(max_val):
            return f"dưới {int(float(max_val)):,}{unit}"
        else:
            return ""
    except (ValueError, TypeError):
        return ""

# Bước 7: Tạo các khoảng
fee_rates_vni["Khoảng Giá trị xe"] = fee_rates_vni.apply(lambda row: format_range(row["Giá trị xe tối thiểu"], row["Giá trị xe tối đa"], " VND"), axis=1)
fee_rates_vni["Khoảng Số chỗ"] = fee_rates_vni.apply(lambda row: format_range(row["Số chỗ tối thiểu"], row["Số chỗ tối đa"], " chỗ"), axis=1)
fee_rates_vni["Khoảng Trọng tải"] = fee_rates_vni.apply(lambda row: format_range(row["Trọng tải tối thiểu"], row["Trọng tải tối đa"], " tấn"), axis=1)
fee_rates_vni["Khoảng Niên hạn"] = fee_rates_vni.apply(lambda row: format_range(row["Niên hạn tối thiểu"], row["Niên hạn tối đa"], " tháng"), axis=1)

# Bước 8: Tạo cột "Loại xe" gọn gàng
def build_loai_xe(row):
    parts = [str(row["Nhóm xe"])]  # Luôn có Nhóm xe

    if pd.notna(row["Mục đích sử dụng"]) and row["Mục đích sử dụng"]:
        parts.append(row["Mục đích sử dụng"])

    if row["Khoảng Giá trị xe"]:
        parts.append(row["Khoảng Giá trị xe"])

    if row["Khoảng Số chỗ"] and row["Khoảng Số chỗ"] not in ["dưới chỗ", ""]:
        parts.append(row["Khoảng Số chỗ"])
    elif row["Khoảng Trọng tải"] and row["Khoảng Trọng tải"] not in ["dưới tấn", ""]:
        parts.append(row["Khoảng Trọng tải"])

    return " ".join(parts)

for col in ["Giá trị xe tối thiểu", "Giá trị xe tối đa", "Niên hạn tối thiểu", "Niên hạn tối đa", "Số chỗ ngồi tối thiểu", "Số chỗ ngồi tối đa", "Trọng tải tối thiểu", "Trọng tải tối đa"]:
    if col in fee_rates_vni.columns:
        fee_rates_vni[col] = fee_rates_vni[col].apply(to_float_or_none)

fee_rates_vni["Loại xe"] = fee_rates_vni.apply(build_loai_xe, axis=1)

# Bước 9: Sắp xếp đúng theo yêu cầu
fee_rates_vni = fee_rates_vni.sort_values(
    by=["_MDS_sort", "Thứ tự nhóm xe", "Missing Both MinMax", "Sort Giá trị xe tối thiểu", "Sort Giá trị xe tối đa", "Sort Số chỗ tối thiểu", "Sort Trọng tải tối thiểu"],
    ascending=[True, True, True, True, True, True, True]
).drop(columns=["Thứ tự nhóm xe", "Missing Both MinMax", "Sort Giá trị xe tối thiểu", "Sort Giá trị xe tối đa", "Sort Số chỗ tối thiểu", "Sort Trọng tải tối thiểu", "_MDS_sort"])

# Bước 10: Giữ thứ tự loại xe khi Pivot
fee_rates_vni["Loại xe"] = pd.Categorical(fee_rates_vni["Loại xe"], categories=fee_rates_vni["Loại xe"].unique(), ordered=True)

# Bước 11: Tạo Pivot Table
pivot_vni_master = fee_rates_vni.pivot_table(
    values="Tỷ lệ phí (%)",
    index="Loại xe",
    columns="Khoảng Niên hạn",
    aggfunc="first",
    observed=False
)

# Bước 12: Sắp xếp cột Khoảng Niên hạn theo thứ tự mong muốn
order_khoang_nien_han = [
    "từ 0 tháng đến dưới 36 tháng",
    "từ 36 tháng đến dưới 72 tháng",
    "từ 72 tháng đến dưới 120 tháng"
]
pivot_vni_master = pivot_vni_master.reindex(
    columns=[col for col in order_khoang_nien_han if col in pivot_vni_master.columns]
)

# Bước 13: Hiển thị đầy đủ bảng
pd.set_option("display.max_columns", None)
pd.set_option("display.width", 0)

from IPython.display import display
# display(pivot_vni_master)

fee_rates_vni.to_csv("fee_rates_vni.csv", encoding='utf-8-sig')

from google.colab import files
# files.download("fee_rates_vni.csv")

import pandas as pd

# Dữ liệu bảng tỷ lệ phí cho BMI
fee_rates_bmi = pd.DataFrame([
    ["BMI", "Xe chở người", "Không KDVT", None, None, None, None, None, None, 0, 36, 0.90 * 1.1,['IDLXE_001','IDLXE_002']],
    ["BMI", "Xe chở người", "Không KDVT", None, None, None, None, None, None, 36, 72, 1.00 * 1.1,['IDLXE_001','IDLXE_002']],
    ["BMI", "Xe chở người", "Không KDVT", None, None, None, None, None, None, 72, 120, 1.10 * 1.1,['IDLXE_001','IDLXE_002']],
    ["BMI", "Xe chở người", "Không KDVT", None, None, None, None, None, None, 120, 156, 1.20 * 1.1,['IDLXE_001','IDLXE_002']],
    ["BMI", "Xe chở người", "Không KDVT", None, None, None, None, None, None, 156, 192, 1.20 * 1.1,['IDLXE_001','IDLXE_002']],
    ["BMI", "Xe chở người/Xe hợp đồng/Xe liên tỉnh", "KDVT", None, 400000000, None, 9, None, None, 0, 36, 1.60 * 1.1,['IDLXE_015','IDLXE_016']],
    ["BMI", "Xe chở người/Xe hợp đồng/Xe liên tỉnh", "KDVT", None, 400000000, None, 9, None, None, 36, 72, 1.74 * 1.1,['IDLXE_015','IDLXE_016']],
    ["BMI", "Xe chở người/Xe hợp đồng/Xe liên tỉnh", "KDVT", None, 400000000, None, 9, None, None, 72, 120, 1.86 * 1.1,['IDLXE_015','IDLXE_016']],
    ["BMI", "Xe chở người/Xe hợp đồng/Xe liên tỉnh", "KDVT", None, 400000000, None, 9, None, None, 120, 156, 2.00 * 1.1,['IDLXE_015','IDLXE_016']],
    ["BMI", "Xe chở người/Xe hợp đồng/Xe liên tỉnh", "KDVT", None, 400000000, None, 9, None, None, 156, 192, 2.29 * 1.1,['IDLXE_015','IDLXE_016']],
    ["BMI", "Xe chở người/Xe hợp đồng/Xe liên tỉnh", "KDVT", 400000000, None, None, 9, None, None, 0, 36, 1.50 * 1.1,['IDLXE_015','IDLXE_016']],
    ["BMI", "Xe chở người/Xe hợp đồng/Xe liên tỉnh", "KDVT", 400000000, None, None, 9, None, None, 36, 72, 1.63 * 1.1,['IDLXE_015','IDLXE_016']],
    ["BMI", "Xe chở người/Xe hợp đồng/Xe liên tỉnh", "KDVT", 400000000, None, None, 9, None, None, 72, 120, 1.75 * 1.1,['IDLXE_015','IDLXE_016']],
    ["BMI", "Xe chở người/Xe hợp đồng/Xe liên tỉnh", "KDVT", 400000000, None, None, 9, None, None, 120, 156, 1.87 * 1.1,['IDLXE_015','IDLXE_016']],
    ["BMI", "Xe chở người/Xe hợp đồng/Xe liên tỉnh", "KDVT", 400000000, None, None, 9, None, None, 156, 192, 2.14 * 1.1,['IDLXE_015','IDLXE_016']],
    ["BMI", "Xe chở người", "KDVT", None, None, 9, None, None, None, 0, 36, 1.20 * 1.1,['IDLXE_016']],
    ["BMI", "Xe chở người", "KDVT", None, None, 9, None, None, None, 36, 72, 1.30 * 1.1,['IDLXE_016']],
    ["BMI", "Xe chở người", "KDVT", None, None, 9, None, None, None, 72, 120, 1.40 * 1.1,['IDLXE_016']],
    ["BMI", "Xe chở người", "KDVT", None, None, 9, None, None, None, 120, 156, 1.50 * 1.1,['IDLXE_016']],
    ["BMI", "Xe chở người", "KDVT", None, None, 9, None, None, None, 156, 192, 1.50 * 1.1,['IDLXE_016']],
    ["BMI", "Xe liên tỉnh", "KDVT", None, None, None, None, None, None, 0, 36, 1.20 * 1.1,['IDLXE_015']],
    ["BMI", "Xe liên tỉnh", "KDVT", None, None, None, None, None, None, 36, 72, 1.30 * 1.1,['IDLXE_015']],
    ["BMI", "Xe liên tỉnh", "KDVT", None, None, None, None, None, None, 72, 120, 1.40 * 1.1,['IDLXE_015']],
    ["BMI", "Xe liên tỉnh", "KDVT", None, None, None, None, None, None, 120, 156, 1.5 * 1.10,['IDLXE_015']],
    ["BMI", "Xe liên tỉnh", "KDVT", None, None, None, None, None, None, 156, 192, 1.50 * 1.1,['IDLXE_015']],
    ["BMI", "Xe taxi/Xe chở thuê hợp đồng điện tử/Xe taxi công nghệ/Xe cho thuê tự lái", "KDVT", None, 400000000, None, None, None, None, 0, 36, 4.00 * 1.1,['IDLXE_018','IDLXE_019','IDLXE_020']],
    ["BMI", "Xe taxi/Xe chở thuê hợp đồng điện tử/Xe taxi công nghệ/Xe cho thuê tự lái", "KDVT", None, 400000000, None, None, None, None, 36, 72, 4.25 * 1.1,['IDLXE_018','IDLXE_019','IDLXE_020']],
    ["BMI", "Xe taxi/Xe chở thuê hợp đồng điện tử/Xe taxi công nghệ/Xe cho thuê tự lái", "KDVT", None, 400000000, None, None, None, None, 72, 120, 4.50 * 1.1,['IDLXE_018','IDLXE_019','IDLXE_020']],
    ["BMI", "Xe taxi/Xe chở thuê hợp đồng điện tử/Xe taxi công nghệ/Xe cho thuê tự lái", "KDVT", None, 400000000, None, None, None, None, 120, 156, 4.75 * 1.1,['IDLXE_018','IDLXE_019','IDLXE_020']],
    ["BMI", "Xe taxi/Xe chở thuê hợp đồng điện tử/Xe taxi công nghệ/Xe cho thuê tự lái", "KDVT", 400000000, None, None, None, None, None, 0, 36, 2.46 * 1.1,['IDLXE_018','IDLXE_019','IDLXE_020']],
    ["BMI", "Xe taxi/Xe chở thuê hợp đồng điện tử/Xe taxi công nghệ/Xe cho thuê tự lái", "KDVT", 400000000, None, None, None, None, None, 36, 72, 2.62 * 1.1,['IDLXE_018','IDLXE_019','IDLXE_020']],
    ["BMI", "Xe taxi/Xe chở thuê hợp đồng điện tử/Xe taxi công nghệ/Xe cho thuê tự lái", "KDVT", 400000000, None, None, None, None, None, 72, 120, 2.77 * 1.1,['IDLXE_018','IDLXE_019','IDLXE_020']],
    ["BMI", "Xe taxi/Xe chở thuê hợp đồng điện tử/Xe taxi công nghệ/Xe cho thuê tự lái", "KDVT", 400000000, None, None, None, None, None, 120, 156, 2.93 * 1.1,['IDLXE_018','IDLXE_019','IDLXE_020']],
    ["BMI", "Xe tập lái", None, None, None, None, None, None, None, 0, 36, 0.90 * 1.1,['IDLXE_010', 'IDLXE_011', 'IDLXE_012', 'IDLXE_013', 'IDLXE_014']],
    ["BMI", "Xe tập lái", None, None, None, None, None, None, None, 36, 72, 1.00 * 1.1,['IDLXE_010', 'IDLXE_011', 'IDLXE_012', 'IDLXE_013', 'IDLXE_014']],
    ["BMI", "Xe tập lái", None, None, None, None, None, None, None, 72, 120, 1.10 * 1.1,['IDLXE_010', 'IDLXE_011', 'IDLXE_012', 'IDLXE_013', 'IDLXE_014']],
    ["BMI", "Xe tập lái", None, None, None, None, None, None, None, 120, 156, 1.20 * 1.1,['IDLXE_010', 'IDLXE_011', 'IDLXE_012', 'IDLXE_013', 'IDLXE_014']],
    ["BMI", "Xe tập lái", None, None, None, None, None, None, None, 156, 192, 1.20 * 1.1,['IDLXE_010', 'IDLXE_011', 'IDLXE_012', 'IDLXE_013', 'IDLXE_014']],
    ["BMI", "Xe chở hàng", "Không KDVT", None, None, None, None, None, 10, 0, 36, 0.90 * 1.1,['IDLXE_005', 'IDLXE_006']],
    ["BMI", "Xe chở hàng", "Không KDVT", None, None, None, None, None, 10, 36, 72, 1.00 * 1.1,['IDLXE_005', 'IDLXE_006']],
    ["BMI", "Xe chở hàng", "Không KDVT", None, None, None, None, None, 10, 72, 120, 1.10 * 1.1,['IDLXE_005', 'IDLXE_006']],
    ["BMI", "Xe chở hàng", "Không KDVT", None, None, None, None, None, 10, 120, 156, 1.20 * 1.1,['IDLXE_005', 'IDLXE_006']],
    ["BMI", "Xe chở hàng", "Không KDVT", None, None, None, None, None, 10, 156, 192, 1.20 * 1.1,['IDLXE_005', 'IDLXE_006']],
    ["BMI", "Xe chở hàng", "Không KDVT", None, None, None, None, 10, None, 0, 36, 1.10 * 1.1,['IDLXE_005', 'IDLXE_006']],
    ["BMI", "Xe chở hàng", "Không KDVT", None, None, None, None, 10, None, 36, 72, 1.20 * 1.1,['IDLXE_005', 'IDLXE_006']],
    ["BMI", "Xe chở hàng", "Không KDVT", None, None, None, None, 10, None, 72, 120, 1.30 * 1.1,['IDLXE_005', 'IDLXE_006']],
    ["BMI", "Xe chở hàng", "Không KDVT", None, None, None, None, 10, None, 120, 156, 1.40 * 1.1,['IDLXE_005', 'IDLXE_006']],
    ["BMI", "Xe chở hàng", "Không KDVT", None, None, None, None, 10, None, 156, 192, 1.40 * 1.1,['IDLXE_005', 'IDLXE_006']],
    ["BMI", "Xe chở hàng", "KDVT", None, None, None, None, None, None, 0, 36, 1.10 * 1.1,['IDLXE_024']],
    ["BMI", "Xe chở hàng", "KDVT", None, None, None, None, None, None, 36, 72, 1.20 * 1.1,['IDLXE_024']],
    ["BMI", "Xe chở hàng", "KDVT", None, None, None, None, None, None, 72, 120, 1.30 * 1.1,['IDLXE_024']],
    ["BMI", "Xe chở hàng", "KDVT", None, None, None, None, None, None, 120, 156, 1.40 * 1.1,['IDLXE_024']],
    ["BMI", "Xe chở hàng", "KDVT", None, None, None, None, None, None, 156, 192, 1.5 * 1.1,['IDLXE_024']],
    ["BMI", "Xe chở hàng đông lạnh", None, None, None, None, None, None, 3.5, 0, 36, 0.90 * 1.1,['IDLXE_025']],
    ["BMI", "Xe chở hàng đông lạnh", None, None, None, None, None, None, 3.5, 36, 72, 1.00 * 1.1,['IDLXE_025']],
    ["BMI", "Xe chở hàng đông lạnh", None, None, None, None, None, None, 3.5, 72, 120, 1.10 * 1.1,['IDLXE_025']],
    ["BMI", "Xe chở hàng đông lạnh", None, None, None, None, None, None, 3.5, 120, 156, 1.20 * 1.1,['IDLXE_025']],
    ["BMI", "Xe chở hàng đông lạnh", None, None, None, None, None, None, 3.5, 156, 192, 1.20 * 1.1,['IDLXE_025']],
    ["BMI", "Xe chở hàng đông lạnh", None, None, None, None, None, 3.5, None, 0, 36, 1.50 * 1.1,['IDLXE_025']],
    ["BMI", "Xe chở hàng đông lạnh", None, None, None, None, None, 3.5, None, 36, 72, 1.60 * 1.1,['IDLXE_025']],
    ["BMI", "Xe chở hàng đông lạnh", None, None, None, None, None, 3.5, None, 72, 120, 1.70 * 1.1,['IDLXE_025']],
    ["BMI", "Xe chở hàng đông lạnh", None, None, None, None, None, 3.5, None, 120, 156, 1.90 * 1.1,['IDLXE_025']],
    ["BMI", "Xe chở hàng đông lạnh", None, None, None, None, None, 3.5, None, 156, 192, 1.90 * 1.1,['IDLXE_025']],
    ["BMI", "Xe hoạt động vùng khai thác khoáng sản", None, None, None, None, None, None, None, 0, 36, 1.50 * 1.1,['IDLXE_025']],
    ["BMI", "Xe hoạt động vùng khai thác khoáng sản", None, None, None, None, None, None, None, 36, 72, 1.60 * 1.1,['IDLXE_025']],
    ["BMI", "Xe hoạt động vùng khai thác khoáng sản", None, None, None, None, None, None, None, 72, 120, 1.70 * 1.1,['IDLXE_025']],
    ["BMI", "Xe hoạt động vùng khai thác khoáng sản", None, None, None, None, None, None, None, 120, 156, 1.90 * 1.1,['IDLXE_025']],
    ["BMI", "Xe hoạt động vùng khai thác khoáng sản", None, None, None, None, None, None, None, 156, 192, 1.90 * 1.1,['IDLXE_025']],
    ["BMI", "Xe buýt/Xe chở tiền/Xe cứu thương/Xe hoạt động trong nội cảng, khu công nghiệp, sân bay/Xe chuyên dùng khác", None, None, None, None, None, None, None, 0, 36, 0.90 * 1.1,['IDLXE_009', 'IDLXE_029', 'IDLXE_030', 'IDLXE_031', 'IDLXE_032', 'IDLXE_033']],
    ["BMI", "Xe buýt/Xe chở tiền/Xe cứu thương/Xe hoạt động trong nội cảng, khu công nghiệp, sân bay/Xe chuyên dùng khác", None, None, None, None, None, None, None, 36, 72, 1.00 * 1.1,['IDLXE_009', 'IDLXE_029', 'IDLXE_030', 'IDLXE_031', 'IDLXE_032', 'IDLXE_033']],
    ["BMI", "Xe buýt/Xe chở tiền/Xe cứu thương/Xe hoạt động trong nội cảng, khu công nghiệp, sân bay/Xe chuyên dùng khác", None, None, None, None, None, None, None, 72, 120, 1.10 * 1.1,['IDLXE_009', 'IDLXE_029', 'IDLXE_030', 'IDLXE_031', 'IDLXE_032', 'IDLXE_033']],
    ["BMI", "Xe buýt/Xe chở tiền/Xe cứu thương/Xe hoạt động trong nội cảng, khu công nghiệp, sân bay/Xe chuyên dùng khác", None, None, None, None, None, None, None, 120, 156, 1.20 * 1.1,['IDLXE_009', 'IDLXE_029', 'IDLXE_030', 'IDLXE_031', 'IDLXE_032', 'IDLXE_033']],
    ["BMI", "Xe buýt/Xe chở tiền/Xe cứu thương/Xe hoạt động trong nội cảng, khu công nghiệp, sân bay/Xe chuyên dùng khác", None, None, None, None, None, None, None, 156, 192, 1.20 * 1.1,['IDLXE_009', 'IDLXE_029', 'IDLXE_030', 'IDLXE_031', 'IDLXE_032', 'IDLXE_033']],
    ["BMI", "Xe pickup/Xe tải van/Xe mini van", None, None, None, None, None, None, None, 0, 36, 1.10 * 1.1,['IDLXE_022', 'IDLXE_023', 'IDLXE_003', 'IDLXE_004']],
    ["BMI", "Xe pickup/Xe tải van/Xe mini van", None, None, None, None, None, None, None, 36, 72, 1.20 * 1.1,['IDLXE_022', 'IDLXE_023', 'IDLXE_003', 'IDLXE_004']],
    ["BMI", "Xe pickup/Xe tải van/Xe mini van", None, None, None, None, None, None, None, 72, 120, 1.30 * 1.1,['IDLXE_022', 'IDLXE_023', 'IDLXE_003', 'IDLXE_004']],
    ["BMI", "Xe pickup/Xe tải van/Xe mini van", None, None, None, None, None, None, None, 120, 156, 1.40 * 1.1,['IDLXE_022', 'IDLXE_023', 'IDLXE_003', 'IDLXE_004']],
    ["BMI", "Xe pickup/Xe tải van/Xe mini van", None, None, None, None, None, None, None, 156, 192, 1.40 * 1.1,['IDLXE_022', 'IDLXE_023', 'IDLXE_003', 'IDLXE_004']],
    ["BMI", "Romooc", None, None, None, None, None, None, None, 0, 36, 0.60 * 1.1,['IDLXE_027', 'IDLXE_028', 'IDLXE_008', 'IDLXE_034']],
    ["BMI", "Romooc", None, None, None, None, None, None, None, 36, 72, 0.70 * 1.1,['IDLXE_027', 'IDLXE_028', 'IDLXE_008', 'IDLXE_034']],
    ["BMI", "Romooc", None, None, None, None, None, None, None, 72, 120, 0.80 * 1.1,['IDLXE_027', 'IDLXE_028', 'IDLXE_008', 'IDLXE_034']],
    ["BMI", "Romooc", None, None, None, None, None, None, None, 120, 156, 1.00 * 1.1,['IDLXE_027', 'IDLXE_028', 'IDLXE_008', 'IDLXE_034']],
    ["BMI", "Romooc", None, None, None, None, None, None, None, 156, 192, 1.00 * 1.1,['IDLXE_027', 'IDLXE_028', 'IDLXE_008', 'IDLXE_034']],
    ["BMI", "Xe đầu kéo", None, None, 400000000, None, 9, None, None, 0, 36, 2.27 * 1.1,['IDLXE_007', 'IDLXE_026']],
    ["BMI", "Xe đầu kéo", None, None, 400000000, None, 9, None, None, 36, 72, 2.42 * 1.1,['IDLXE_007', 'IDLXE_026']],
    ["BMI", "Xe đầu kéo", None, None, 400000000, None, 9, None, None, 72, 120, 2.58 * 1.1,['IDLXE_007', 'IDLXE_026']],
    ["BMI", "Xe đầu kéo", None, None, 400000000, None, 9, None, None, 120, 156, 2.87 * 1.1,['IDLXE_007', 'IDLXE_026']],
    ["BMI", "Xe đầu kéo", None, None, 400000000, None, 9, None, None, 156, 192, 3.06 * 1.1,['IDLXE_007', 'IDLXE_026']],
    ["BMI", "Xe đầu kéo", None, 400000000, None, None, 9, None, None, 0, 36, 1.70 * 1.1,['IDLXE_007', 'IDLXE_026']],
    ["BMI", "Xe đầu kéo", None, 400000000, None, None, 9, None, None, 36, 72, 1.82 * 1.1,['IDLXE_007', 'IDLXE_026']],
    ["BMI", "Xe đầu kéo", None, 400000000, None, None, 9, None, None, 72, 120, 1.94 * 1.1,['IDLXE_007', 'IDLXE_026']],
    ["BMI", "Xe đầu kéo", None, 400000000, None, None, 9, None, None, 120, 156, 2.15 * 1.1,['IDLXE_007', 'IDLXE_026']],
    ["BMI", "Xe đầu kéo", None, 400000000, None, None, 9, None, None, 156, 192, 2.29 * 1.1,['IDLXE_007', 'IDLXE_026']],

], columns=[
    "Công ty bảo hiểm", "Nhóm xe", "Mục đích sử dụng", "Giá trị xe tối thiểu", "Giá trị xe tối đa",
    "Số chỗ tối thiểu", "Số chỗ tối đa", "Trọng tải tối thiểu", "Trọng tải tối đa",
    "Niên hạn tối thiểu", "Niên hạn tối đa", "Tỷ lệ phí (%)","IDL Code"
])

import pandas as pd

# Bước 1: Tạo cột phụ để sắp xếp mục đích sử dụng mà không làm mất dữ liệu gốc
fee_rates_bmi["_MDS_sort"] = fee_rates_bmi["Mục đích sử dụng"].fillna("")

# Bước 2: Thứ tự mục đích sử dụng mong muốn
muc_dich_order = ["Không KDVT", "KDVT", ""]

# Bước 3: Gán thứ tự cho cột phụ
fee_rates_bmi["_MDS_sort"] = pd.Categorical(fee_rates_bmi["_MDS_sort"], categories=muc_dich_order, ordered=True)

# Bước 4: Thứ tự nhóm xe theo input ban đầu
fee_rates_bmi["Thứ tự nhóm xe"] = fee_rates_bmi["Nhóm xe"].astype("category")
fee_rates_bmi["Thứ tự nhóm xe"] = fee_rates_bmi["Thứ tự nhóm xe"].cat.set_categories(
    fee_rates_bmi["Nhóm xe"].unique(), ordered=True
)

# Bước 5: Chuẩn hóa để sắp xếp (dữ liệu số)
for col in ["Giá trị xe tối thiểu", "Giá trị xe tối đa", "Niên hạn tối thiểu", "Niên hạn tối đa", "Số chỗ ngồi tối thiểu", "Số chỗ ngồi tối đa", "Trọng tải tối thiểu", "Trọng tải tối đa"]:
    if col in fee_rates_bmi.columns:
        fee_rates_bmi[col] = fee_rates_bmi[col].apply(to_float_or_none)



fee_rates_bmi["Sort Giá trị xe tối thiểu"] = fee_rates_bmi["Giá trị xe tối thiểu"].fillna(-999999999999999)
fee_rates_bmi["Sort Giá trị xe tối đa"] = fee_rates_bmi["Giá trị xe tối đa"].fillna(999999999999999)

fee_rates_bmi["Missing Both MinMax"] = fee_rates_bmi[["Giá trị xe tối thiểu", "Giá trị xe tối đa"]].isna().all(axis=1)
fee_rates_bmi["Sort Số chỗ tối thiểu"] = pd.to_numeric(fee_rates_bmi["Số chỗ tối thiểu"], errors="coerce").fillna(-999999999)
fee_rates_bmi["Sort Trọng tải tối thiểu"] = pd.to_numeric(fee_rates_bmi["Trọng tải tối thiểu"], errors="coerce").fillna(-999999999)

# Bước 6: Hàm format_range an toàn
def format_range(min_val, max_val, unit=""):
    try:
        if pd.notna(min_val) and pd.notna(max_val):
            return f"từ {int(float(min_val)):,}{unit} đến dưới {int(float(max_val)):,}{unit}"
        elif pd.notna(min_val):
            return f"từ {int(float(min_val)):,}{unit} trở lên"
        elif pd.notna(max_val):
            return f"dưới {int(float(max_val)):,}{unit}"
        else:
            return ""
    except (ValueError, TypeError):
        return ""

# Bước 7: Tạo các khoảng
fee_rates_bmi["Khoảng Giá trị xe"] = fee_rates_bmi.apply(lambda row: format_range(row["Giá trị xe tối thiểu"], row["Giá trị xe tối đa"], " VND"), axis=1)
fee_rates_bmi["Khoảng Số chỗ"] = fee_rates_bmi.apply(lambda row: format_range(row["Số chỗ tối thiểu"], row["Số chỗ tối đa"], " chỗ"), axis=1)
fee_rates_bmi["Khoảng Trọng tải"] = fee_rates_bmi.apply(lambda row: format_range(row["Trọng tải tối thiểu"], row["Trọng tải tối đa"], " tấn"), axis=1)
fee_rates_bmi["Khoảng Niên hạn"] = fee_rates_bmi.apply(lambda row: format_range(row["Niên hạn tối thiểu"], row["Niên hạn tối đa"], " tháng"), axis=1)

# Bước 8: Tạo cột "Loại xe" gọn gàng
def build_loai_xe(row):
    parts = [str(row["Nhóm xe"])]  # Luôn có Nhóm xe

    if pd.notna(row["Mục đích sử dụng"]) and row["Mục đích sử dụng"]:
        parts.append(row["Mục đích sử dụng"])

    if row["Khoảng Giá trị xe"]:
        parts.append(row["Khoảng Giá trị xe"])

    if row["Khoảng Số chỗ"] and row["Khoảng Số chỗ"] not in ["dưới chỗ", ""]:
        parts.append(row["Khoảng Số chỗ"])
    elif row["Khoảng Trọng tải"] and row["Khoảng Trọng tải"] not in ["dưới tấn", ""]:
        parts.append(row["Khoảng Trọng tải"])

    return " ".join(parts)

fee_rates_bmi["Loại xe"] = fee_rates_bmi.apply(build_loai_xe, axis=1)

# Bước 9: Sắp xếp đúng theo yêu cầu
fee_rates_bmi = fee_rates_bmi.sort_values(
    by=["_MDS_sort", "Thứ tự nhóm xe", "Missing Both MinMax", "Sort Giá trị xe tối thiểu", "Sort Giá trị xe tối đa", "Sort Số chỗ tối thiểu", "Sort Trọng tải tối thiểu"],
    ascending=[True, True, True, True, True, True, True]
).drop(columns=["Thứ tự nhóm xe", "Missing Both MinMax", "Sort Giá trị xe tối thiểu", "Sort Giá trị xe tối đa", "Sort Số chỗ tối thiểu", "Sort Trọng tải tối thiểu", "_MDS_sort"])

# Bước 10: Giữ thứ tự loại xe khi Pivot
fee_rates_bmi["Loại xe"] = pd.Categorical(fee_rates_bmi["Loại xe"], categories=fee_rates_bmi["Loại xe"].unique(), ordered=True)

# Bước 11: Tạo Pivot Table
pivot_bmi_master = fee_rates_bmi.pivot_table(
    values="Tỷ lệ phí (%)",
    index="Loại xe",
    columns="Khoảng Niên hạn",
    aggfunc="first",
    observed=False
)

# Bước 12: Sắp xếp cột Khoảng Niên hạn theo thứ tự mong muốn
order_khoang_nien_han = [
    "từ 0 tháng đến dưới 36 tháng",
    "từ 36 tháng đến dưới 72 tháng",
    "từ 72 tháng đến dưới 120 tháng",
    "từ 120 tháng đến dưới 156 tháng",
    "từ 156 tháng đến dưới 192 tháng"
]
pivot_bmi_master = pivot_bmi_master.reindex(
    columns=[col for col in order_khoang_nien_han if col in pivot_bmi_master.columns]
)

# Bước 13: Hiển thị đầy đủ bảng
pd.set_option("display.max_columns", None)
pd.set_option("display.width", 0)

from IPython.display import display
# display(pivot_bmi_master)

fee_rates_bmi.to_csv("fee_rates_bmi.csv", encoding='utf-8-sig')

from google.colab import files
files.download("fee_rates_bmi.csv")

import pandas as pd

# Dữ liệu bảng tỷ lệ phí cho BMI
fee_rates_pvi = pd.DataFrame([
    ["PVI", "Xe chở người", "Không KDVT", None, None, None, None, None, None, None, None, 1.5,['IDLXE_001'],"A"],
    ["PVI", "Xe chở tiền", "Không KDVT", None, None, None, None, None, None, None, None, 1.5,['IDLXE_032'],"A"],
    ["PVI", "Xe hoạt động trong nội cảng", "Không KDVT", None, None, None, None, None, None, None, None, 1.4,[],"A"],
    ["PVI", "Xe tập lái", "Không KDVT", None, None, None, None, None, None, None, None, 1.55,['IDLXE_010','IDLXE_011','IDLXE_012','IDLXE_013','IDLXE_014'],"A"],
    ["PVI", "Xe pickup", "Không KDVT", None, None, None, None, None, None, None, None, 1.7,['IDLXE_003'],"A"],
    ["PVI", "Xetải VAN", "Không KDVT", None, None, None, None, None, None, None, None, 1.95,['IDLXE_004'],"A"],
    ["PVI", "Xe điện hoạt động trong khu vực nội bộ", "Không KDVT", None, None, None, None, None, None, None, None, 0.5,[],"A"],
    ["PVI", "Xe điện hoạt động ngoài khu vực công cộng", "Không KDVT", None, None, None, None, None, None, None, None, 1.5,['IDLXE_002'],"A"],
    ["PVI", "Xe cứu thương/cứu hỏa", None, None, None, None, None, None, None, None, None, 1.6,['IDLXE_031'],"B"],
    ["PVI", "Xe hoạt động trên khu vực khai thác khoáng sản", None, None, None, None, None, None, None, None, None, 1.7,['IDLXE_005','IDLXE_024'],"C"],
    ["PVI", "Xe ô tô đông lạnh/Xe đầu kéo", None, None, None, None, None, None, None, None, None, 2.6,['IDLXE_006','IDLXE_025','IDLXE_007','IDLXE_026'],"C"],
    ["PVI", "Romooc", None, None, None, None, None, None, None, None, None, 1.1,['IDLXE_008','IDLXE_027'],"C"],
    ["PVI", "Romooc tự đổ", None, None, None, None, None, None, None, None, None, 2.2,['IDLXE_034','IDLXE_028'],"C"],
    ["PVI", "Xe chở người", "KDVT", None, None, None, None, None, None, None, None, 1.75,['IDLXE_016'],"C"],
    ["PVI", "Xe pickup", "KDVT", None, None, None, None, None, None, None, None, 1.9,['IDLXE_022'],"C"],
    ["PVI", "Xe tải van", "KDVT", None, None, None, None, None, None, None, None, 2.05,['IDLXE_023'],"C"],
    ["PVI", "Xe buýt/Xe khách nội tỉnh", "KDVT", None, None, None, None, None, None, None, None, 1.6,['IDLXE_017'],"C"],
    ["PVI", "Xe buýt/Xe khách liên tỉnh", "KDVT", None, None, None, None, None, None, None, None, 2.2,['IDLXE_015'],"C"],
    ["PVI", "Xe Taxi truyền thống/Xe cho thuê tự lái", "KDVT", None, None, None, None, None, None, None, None, 3.5,['IDLXE_018','IDLXE_020'],"C"],
    ["PVI", "Xe Taxi công nghệ", "KDVT", None, None, None, None, None, None, None, None, 2.00,['IDLXE_019','IDLXE_021']],"C",

], columns=[
    "Công ty bảo hiểm", "Nhóm xe", "Mục đích sử dụng", "Giá trị xe tối thiểu", "Giá trị xe tối đa",
    "Số chỗ tối thiểu", "Số chỗ tối đa", "Trọng tải tối thiểu", "Trọng tải tối đa",
    "Niên hạn tối thiểu", "Niên hạn tối đa", "Tỷ lệ phí (%)","IDL Code",'PVI_code'
])

import pandas as pd

# Bước 1: Tạo cột phụ để sắp xếp mục đích sử dụng mà không làm mất dữ liệu gốc
fee_rates_pvi["_MDS_sort"] = fee_rates_pvi["Mục đích sử dụng"].fillna("")

# Bước 2: Thứ tự mục đích sử dụng mong muốn
muc_dich_order = ["Không KDVT", "KDVT", ""]

# Bước 3: Gán thứ tự cho cột phụ
fee_rates_pvi["_MDS_sort"] = pd.Categorical(fee_rates_pvi["_MDS_sort"], categories=muc_dich_order, ordered=True)

# Bước 4: Thứ tự nhóm xe theo input ban đầu
fee_rates_pvi["Thứ tự nhóm xe"] = fee_rates_pvi["Nhóm xe"].astype("category")
fee_rates_pvi["Thứ tự nhóm xe"] = fee_rates_pvi["Thứ tự nhóm xe"].cat.set_categories(
    fee_rates_pvi["Nhóm xe"].dropna().unique(), ordered=True
)


# Bước 5: Chuẩn hóa để sắp xếp (dữ liệu số)
for col in ["Giá trị xe tối thiểu", "Giá trị xe tối đa", "Niên hạn tối thiểu", "Niên hạn tối đa", "Số chỗ ngồi tối thiểu", "Số chỗ ngồi tối đa", "Trọng tải tối thiểu", "Trọng tải tối đa"]:
    if col in fee_rates_pvi.columns:
        fee_rates_pvi[col] = fee_rates_pvi[col].apply(to_float_or_none)


fee_rates_pvi["Sort Giá trị xe tối thiểu"] = fee_rates_pvi["Giá trị xe tối thiểu"].fillna(-999999999999999)
fee_rates_pvi["Sort Giá trị xe tối đa"] = fee_rates_pvi["Giá trị xe tối đa"].fillna(999999999999999)

fee_rates_pvi["Missing Both MinMax"] = fee_rates_pvi[["Giá trị xe tối thiểu", "Giá trị xe tối đa"]].isna().all(axis=1)
fee_rates_pvi["Sort Số chỗ tối thiểu"] = pd.to_numeric(fee_rates_pvi["Số chỗ tối thiểu"], errors="coerce").fillna(-999999999)
fee_rates_pvi["Sort Trọng tải tối thiểu"] = pd.to_numeric(fee_rates_pvi["Trọng tải tối thiểu"], errors="coerce").fillna(-999999999)

# Bước 6: Hàm format_range an toàn
def format_range(min_val, max_val, unit=""):
    try:
        if pd.notna(min_val) and pd.notna(max_val):
            return f"từ {int(float(min_val)):,}{unit} đến dưới {int(float(max_val)):,}{unit}"
        elif pd.notna(min_val):
            return f"từ {int(float(min_val)):,}{unit} trở lên"
        elif pd.notna(max_val):
            return f"dưới {int(float(max_val)):,}{unit}"
        else:
            return ""
    except (ValueError, TypeError):
        return ""

# Bước 7: Tạo các khoảng
fee_rates_pvi["Khoảng Giá trị xe"] = fee_rates_pvi.apply(lambda row: format_range(row["Giá trị xe tối thiểu"], row["Giá trị xe tối đa"], " VND"), axis=1)
fee_rates_pvi["Khoảng Số chỗ"] = fee_rates_pvi.apply(lambda row: format_range(row["Số chỗ tối thiểu"], row["Số chỗ tối đa"], " chỗ"), axis=1)
fee_rates_pvi["Khoảng Trọng tải"] = fee_rates_pvi.apply(lambda row: format_range(row["Trọng tải tối thiểu"], row["Trọng tải tối đa"], " tấn"), axis=1)
fee_rates_pvi["Khoảng Niên hạn"] = fee_rates_pvi.apply(lambda row: format_range(row["Niên hạn tối thiểu"], row["Niên hạn tối đa"], " tháng"), axis=1)

# Bước 8: Tạo cột "Loại xe" gọn gàng
def build_loai_xe(row):
    parts = [str(row["Nhóm xe"])]  # Luôn có Nhóm xe

    if pd.notna(row["Mục đích sử dụng"]) and row["Mục đích sử dụng"]:
        parts.append(row["Mục đích sử dụng"])

    if row["Khoảng Giá trị xe"]:
        parts.append(row["Khoảng Giá trị xe"])

    if row["Khoảng Số chỗ"] and row["Khoảng Số chỗ"] not in ["dưới chỗ", ""]:
        parts.append(row["Khoảng Số chỗ"])
    elif row["Khoảng Trọng tải"] and row["Khoảng Trọng tải"] not in ["dưới tấn", ""]:
        parts.append(row["Khoảng Trọng tải"])

    return " ".join(parts)

fee_rates_pvi["Loại xe"] = fee_rates_pvi.apply(build_loai_xe, axis=1)

# Bước 9: Sắp xếp đúng theo yêu cầu
fee_rates_pvi = fee_rates_pvi.sort_values(
    by=["_MDS_sort", "Thứ tự nhóm xe", "Missing Both MinMax", "Sort Giá trị xe tối thiểu", "Sort Giá trị xe tối đa", "Sort Số chỗ tối thiểu", "Sort Trọng tải tối thiểu"],
    ascending=[True, True, True, True, True, True, True]
).drop(columns=["Thứ tự nhóm xe", "Missing Both MinMax", "Sort Giá trị xe tối thiểu", "Sort Giá trị xe tối đa", "Sort Số chỗ tối thiểu", "Sort Trọng tải tối thiểu", "_MDS_sort"])

# Bước 10: Giữ thứ tự loại xe khi Pivot
fee_rates_pvi["Loại xe"] = pd.Categorical(fee_rates_pvi["Loại xe"], categories=fee_rates_pvi["Loại xe"].unique(), ordered=True)

# Bước 11: Tạo Pivot Table
pivot_pvi_master = fee_rates_pvi.pivot_table(
    values="Tỷ lệ phí (%)",
    index="Loại xe",
    columns="Khoảng Niên hạn",
    aggfunc="first",
    observed=False
)

# Bước 12: Sắp xếp cột Khoảng Niên hạn theo thứ tự mong muốn
order_khoang_nien_han = [
    "từ 0 tháng đến dưới 36 tháng",
    "từ 36 tháng đến dưới 72 tháng",
    "từ 72 tháng đến dưới 120 tháng",
    "từ 120 tháng đến dưới 156 tháng",
    "từ 156 tháng đến dưới 192 tháng"
]
pivot_pvi_master = pivot_pvi_master.reindex(
    columns=[col for col in order_khoang_nien_han if col in pivot_pvi_master.columns]
)

# Bước 13: Hiển thị đầy đủ bảng
pd.set_option("display.max_columns", None)
pd.set_option("display.width", 0)

from IPython.display import display
# display(pivot_pvi_master)

fee_rates_pvi.to_csv("fee_rates_pvi.csv", encoding='utf-8-sig')

from google.colab import files
# files.download("fee_rates_pvi.csv")

import pandas as pd

# Dữ liệu bảng tỷ lệ phí cho BMI
fee_rates_tnds = pd.DataFrame([
    ["Xe chở người", "Không KDVT", None, 6, None, None, 480700,['IDLXE_001', 'IDLXE_002']],
     ["Xe chở người", "Không KDVT", 6, 11, None, None, 873400,['IDLXE_001', 'IDLXE_002']],
     ["Xe chở người", "Không KDVT", 12, 24, None, None, 1397000,['IDLXE_001', 'IDLXE_002']],
     ["Xe chở người", "Không KDVT", 24, None, None, None, 1397000,['IDLXE_001', 'IDLXE_002']],
     ["Xe pickup", "Không KDVT", None, None, None, None, 480700,['IDLXE_003', 'IDLXE_004']],
     ["Xe chở người", "KDVT", None, 6, None, None, 831600,['IDLXE_015', 'IDLXE_016', 'IDLXE_018', 'IDLXE_019', 'IDLXE_020', 'IDLXE_021']],
     ["Xe chở người", "KDVT", 6, 7, None, None, 1021900,['IDLXE_015', 'IDLXE_016', 'IDLXE_018', 'IDLXE_019', 'IDLXE_020', 'IDLXE_021']],
     ["Xe chở người", "KDVT", 7, 8, None, None, 1188000,['IDLXE_015', 'IDLXE_016', 'IDLXE_018', 'IDLXE_019', 'IDLXE_020', 'IDLXE_021']],
     ["Xe chở người", "KDVT", 8, 9, None, None, 1378300,['IDLXE_015', 'IDLXE_016', 'IDLXE_018', 'IDLXE_019', 'IDLXE_020', 'IDLXE_021']],
     ["Xe chở người", "KDVT", 9, 10, None, None, 1544400,['IDLXE_015', 'IDLXE_016', 'IDLXE_018', 'IDLXE_019', 'IDLXE_020', 'IDLXE_021']],
     ["Xe chở người", "KDVT", 10, 11, None, None, 1663200,['IDLXE_015', 'IDLXE_016', 'IDLXE_018', 'IDLXE_019', 'IDLXE_020', 'IDLXE_021']],
     ["Xe chở người", "KDVT", 11, 12, None, None, 1821600,['IDLXE_015', 'IDLXE_016', 'IDLXE_018', 'IDLXE_019', 'IDLXE_020', 'IDLXE_021']],
     ["Xe chở người", "KDVT", 12, 13, None, None, 2004200,['IDLXE_015', 'IDLXE_016', 'IDLXE_018', 'IDLXE_019', 'IDLXE_020', 'IDLXE_021']],
      ["Xe chở người", "KDVT", 13, 14, None, None, 2253900,['IDLXE_015', 'IDLXE_016', 'IDLXE_018', 'IDLXE_019', 'IDLXE_020', 'IDLXE_021']],
      ["Xe chở người", "KDVT", 14, 15, None, None, 2443100,['IDLXE_015', 'IDLXE_016', 'IDLXE_018', 'IDLXE_019', 'IDLXE_020', 'IDLXE_021']],
      ["Xe chở người", "KDVT", 15, 16, None, None, 2633400,['IDLXE_015', 'IDLXE_016', 'IDLXE_018', 'IDLXE_019', 'IDLXE_020', 'IDLXE_021']],
      ["Xe chở người", "KDVT", 16, 17, None, None, 3359400,['IDLXE_015', 'IDLXE_016', 'IDLXE_018', 'IDLXE_019', 'IDLXE_020', 'IDLXE_021']],
      ["Xe chở người", "KDVT", 17, 18, None, None, 2989800,['IDLXE_015', 'IDLXE_016', 'IDLXE_018', 'IDLXE_019', 'IDLXE_020', 'IDLXE_021']],
      ["Xe chở người", "KDVT", 18, 19, None, None, 3155900,['IDLXE_015', 'IDLXE_016', 'IDLXE_018', 'IDLXE_019', 'IDLXE_020', 'IDLXE_021']],
      ["Xe chở người", "KDVT", 19, 20, None, None, 3345100,['IDLXE_015', 'IDLXE_016', 'IDLXE_018', 'IDLXE_019', 'IDLXE_020', 'IDLXE_021']],
      ["Xe chở người", "KDVT", 20, 21, None, None, 3510100,['IDLXE_015', 'IDLXE_016', 'IDLXE_018', 'IDLXE_019', 'IDLXE_020', 'IDLXE_021']],
      ["Xe chở người", "KDVT", 21, 22, None, None, 3700400,['IDLXE_015', 'IDLXE_016', 'IDLXE_018', 'IDLXE_019', 'IDLXE_020', 'IDLXE_021']],
       ["Xe chở người", "KDVT", 22, 23, None, None, 3866500,['IDLXE_015', 'IDLXE_016', 'IDLXE_018', 'IDLXE_019', 'IDLXE_020', 'IDLXE_021']],
       ["Xe chở người", "KDVT", 23, 24, None, None, 4056800,['IDLXE_015', 'IDLXE_016', 'IDLXE_018', 'IDLXE_019', 'IDLXE_020', 'IDLXE_021']],
       ["Xe chở người", "KDVT", 24, 25, None, None, 5095200,['IDLXE_015', 'IDLXE_016', 'IDLXE_018', 'IDLXE_019', 'IDLXE_020', 'IDLXE_021']],
       ["Xe chở người", "KDVT", 25, 26, None, None, 5294300,['IDLXE_015', 'IDLXE_016', 'IDLXE_018', 'IDLXE_019', 'IDLXE_020', 'IDLXE_021']],
     ["Xe pickup", "KDVT", None, None, None, None, 1026300,['IDLXE_022', 'IDLXE_023']],
     ["Xe chở hàng", None, None, None, None, 3, 938300,['IDLXE_005', 'IDLXE_006', 'IDLXE_024', 'IDLXE_025']],
     ["Xe chở hàng", None, None, None, 3, 8, 1826000,['IDLXE_005', 'IDLXE_006', 'IDLXE_024', 'IDLXE_025']],
     ["Xe chở hàng", None, None, None, 8, 15, 3020600,['IDLXE_005', 'IDLXE_006', 'IDLXE_024', 'IDLXE_025']],
     ["Xe chở hàng", None, None, None, 15, None, 3520000,['IDLXE_005', 'IDLXE_006', 'IDLXE_024', 'IDLXE_025']],
     ["Xe cứu thương", None, None, None, None, None, 1231560,['IDLXE_031']],
     ["Xe chở tiền", None, None, None, None, None, 576840,['IDLXE_032']],
     ["Xe ô tô chuyên dùng khác", None, None, None, None, 3, 1125960,['IDLXE_029','IDLXE_009']],
     ["Xe ô tô chuyên dùng khác", None, None, None, 3, 8, 2191200,['IDLXE_029','IDLXE_009']],
     ["Xe ô tô chuyên dùng khác", None, None, None, 8, 15, 3624720,['IDLXE_029','IDLXE_009']],
     ["Xe ô tô chuyên dùng khác", None, None, None, 15, None, 4224000,['IDLXE_029','IDLXE_009']],
     ["Xe đầu kéo/Romooc", None, None, None, None, None, 5280000,['IDLXE_026', 'IDLXE_027', 'IDLXE_028', 'IDLXE_007', 'IDLXE_008', 'IDLXE_034']],
     ["Xe buýt", None, None, 6, None, None, 480700,['IDLXE_017']],
     ["Xe buýt", None, 6, 11, None, None, 873400,['IDLXE_017']],
     ["Xe buýt", None, 12, 24, None, None, 1397000,['IDLXE_017']],
     ["Xe buýt", None, 24, None, None, None, 1397000,['IDLXE_017']],
     ["Xe tập lái", None, 0, 6, None, None, 576840,['IDLXE_010']],
     ["Xe tập lái", None, 6, 11, None, None, 1048080,['IDLXE_010']],
     ["Xe tập lái", None, 12, 24, None, None, 1676400,['IDLXE_010']],
     ["Xe tập lái", None, 24, None, None, None, 2409000,['IDLXE_010']],
     ["Xe tập lái", None, None, None, None, None, 576840,['IDLXE_012']],
     ["Xe tập lái", None, None, None, None, 3, 1125960,['IDLXE_011']],
     ["Xe tập lái", None, None, None, 3, 8, 2191200,['IDLXE_011']],
    ["Xe tập lái", None, None, None, 8, 15, 3624720,['IDLXE_011']],
    ["Xe tập lái", None, None, None, 15, None, 4224000,['IDLXE_011']],
    ["Xe đầu kéo/Romooc", None, None, None, None, None, 1125960,['IDLXE_026', 'IDLXE_027', 'IDLXE_028', 'IDLXE_007', 'IDLXE_008', 'IDLXE_034']]
     ]


, columns=[
    "Nhóm xe", "Mục đích sử dụng", "Số chỗ tối thiểu", "Số chỗ tối đa", "Trọng tải tối thiểu", "Trọng tải tối đa",
    "Phí bảo hiểm","IDL Code"
])

import pandas as pd
import gspread
from google.colab import auth
from google.auth import default

# Bước 1: Xác thực
auth.authenticate_user()
creds, _ = default()
gc = gspread.authorize(creds)

# Bước 2: Mở Google Sheet
spreadsheet_url = "https://docs.google.com/spreadsheets/d/1lZTsaGto0WFVHHG7LCWYvFGoF_dUerBGEjYDbyWMXtQ/edit?gid=2063425688#gid=2063425688"
sheet = gc.open_by_url(spreadsheet_url)
worksheet = sheet.worksheet("1. Applications") # hoặc chọn theo tên sheet nếu muốn

# Bước 3: Lấy dữ liệu từ dòng 2 (header) và dữ liệu từ dòng 3 trở đi
values = worksheet.get_all_values()
header = values[1]  # Row 2 is header
header = [col.replace("\n", " ").strip() for col in header]  # Remove line breaks from header

data = values[2:]   # From row 3 onwards
applications = pd.DataFrame(data, columns=header)

# Hiển thị dữ liệu đầu vào
# applications.head()

# Clean and rename columns
applications.columns = applications.columns.str.strip()
group_cols = [col for col in applications.columns if "nhóm xe" in col.lower() or "loại xe" in col.lower()]
applications["Nhóm xe tổng hợp"] = applications[group_cols].astype(str).apply(lambda row: " ".join(row.values), axis=1)

import re

def remove_special_characters_keep_letters(text):
    if not isinstance(text, str):
        return ""

    # Loại bỏ các cụm từ "có kinh doanh", "không kinh doanh" (bất kể hoa thường)
    # text = re.sub(r'\b(có|không)\s+kinh\s+doanh\b', '', text, flags=re.IGNORECASE)

    # Giữ lại chữ cái có hoặc không dấu
    text = re.sub(r'[^A-Za-zÀ-ỹà-ỹ\s]', '', text)

    # Xoá khoảng trắng thừa
    return text.strip()

applications["Loại xe"] = applications["Loại xe"].apply(remove_special_characters_keep_letters)

# Tìm cột phù hợp theo từ khóa
def find_column(keywords):
    for col in applications.columns:
        for kw in keywords:
            if kw.lower() in col.lower():
                return col
    return None



# Đổi tên động theo từ khóa
applications.rename(columns={
    find_column(["VNĐ"]): "vehicle_value",
    find_column(['Họ và Tên chủ đăng ký xe']):"owner",
    find_column(['Số điện thoại chủ đăng ký xe']):"phone_number",
    find_column(['Email chủ đăng ký xe']):"email",
    find_column(['Địa chỉ']):"address",
    find_column(["Mục đích sử dụng"]): "usage_purpose",
    find_column(["Nhóm xe"]): "car_group",
    find_column(["Loại xe"]): "car_type",
    find_column(["Nhãn hiệu"]): "brand",
    find_column(["Số loại"]): "model",
    find_column(["Số khung"]): "chassis_no",
    find_column(["Số máy"]): "engine_no",
    find_column(["Biển số xe"]): "plate_no",
    find_column(["Số chỗ ngồi"]): "seat_capacity",
    find_column(["Trọng tải"]): "load_capacity",
    find_column(["lần đầu", "năm sản xuất"]): "first_registration_date",
    find_column(["Mã CTBH"]): "insurance_company",
    find_column(["Rider VCX  Mất cắp bộ phận"]): "rider_theft",
    find_column(["Rider VCX Khấu hao thay mới"]): "rider_khauhao",
    find_column(["Rider VCX  Lựa chọn CSSC"]): "rider_cssc",
    find_column(["Rider VCX  Thủy kích"]): "rider_thuykich",
    find_column(["QL TNDS"]): "ql_tnds",
    find_column(["NNTX"]):"ql_tnnntx",
    find_column(["QL Vật chất xe"]): "ql_vcx",
    find_column(["vehicle_type_code"]): "idl_code"

}, inplace=True)

def parse_numeric_or_blank(x):
    try:
        return float(x)
    except (ValueError, TypeError):
        return ""

applications["seat_capacity"] = applications["seat_capacity"].apply(parse_numeric_or_blank)
applications["load_capacity"] = applications["load_capacity"].apply(parse_numeric_or_blank)
applications["usage_purpose"] = applications["usage_purpose"].str.lower().apply(lambda x: "không kdvt" if "không" in x else ("kdvt" if "có" in x or "kd" in x else None))

def calculate_vehicle_fee(
    vehicle_value, idl_code, usage_purpose, seat_capacity, load_capacity,
    first_registration_date, insurance_companies,
    theft_coverage=False, include_tnds=False, include_tnnntx=False, include_vcx=False,lua_chon_cssc_coverage=False,thuy_kich_coverage=False,khau_hao_coverage=False,
    debug=False
):
    if not include_tnds and not include_vcx:
        return "Không có quyền lợi nào được chọn"

    usage_purpose = None if usage_purpose == "" else usage_purpose
    seat_capacity = to_float_or_none(seat_capacity)
    load_capacity = to_float_or_none(load_capacity)
    idl_code = None if idl_code == "" else idl_code
    first_registration_date = None if first_registration_date == "" else first_registration_date

    try:
        if isinstance(vehicle_value, str):
            vehicle_value = vehicle_value.replace(",", "").replace(".", "")
        vehicle_value = float(vehicle_value)
    except:
        return "Giá trị xe không hợp lệ"

    if isinstance(insurance_companies, str):
        import re
        insurance_companies = [c.strip() for c in re.split(r"[,/]", insurance_companies) if c.strip()]

    today = datetime.today()
    months_used = None
    if first_registration_date:
        registration_date = parse_date(first_registration_date) if isinstance(first_registration_date, str) else first_registration_date
        if registration_date:
            if registration_date > today:
                return f"Ngày đăng ký không hợp lệ: không được lớn hơn ngày hiện tại ({registration_date.date()})"
            months_used = (today.year - registration_date.year) * 12 + (today.month - registration_date.month)
        else:
            return f"Ngày đăng ký không hợp lệ: {first_registration_date}"

    if usage_purpose is not None:
        usage_purpose = usage_purpose.lower()

    if include_tnnntx and seat_capacity is None:
        return "Cần nhập số chỗ ngồi để tính phí Tai nạn NNTX"

    all_results = []
    special_tnds = {"IDLXE_015", "IDLXE_016", "IDLXE_018", "IDLXE_019", "IDLXE_020", "IDLXE_021"}
    special_vni = {"IDLXE_010", "IDLXE_011", "IDLXE_012", "IDLXE_013", "IDLXE_014"}
    special_pvi = {"IDLXE_002", "IDLXE_014", "IDLXE_021"}

    pvi_depreciation_matrix = {
        "A": [0.0, 0.1, 0.15, 0.2, 0.5],
        "B": [0.0, 0.15, 0.2, 0.004, 0.5],
        "C": [0.0, 0.2, 0.3, 0.4, 0.5],
    }

    for insurance_company in insurance_companies:

        if insurance_company.lower() == "vni":
            fee_rates = fee_rates_vni.copy()
            theft_rate = 0.1

        elif insurance_company.lower() == "bmi":
            fee_rates = fee_rates_bmi.copy()
            theft_rate = 0.1

        elif insurance_company.lower() == "pvi":
            fee_rates = fee_rates_pvi.copy()
            theft_rate = 0.2
            thuy_kich_rate = 0.1


        else:
            continue

        fee_rates['Nhóm xe'] = fee_rates['Nhóm xe'].str.lower()
        fee_rates['Mục đích sử dụng'] = fee_rates['Mục đích sử dụng'].str.lower()

        vcx_idl_code = idl_code
        if insurance_company.lower() == "vni":
            vcx_replacements = {
                "IDLXE_010": "IDLXE_001",
                "IDLXE_011": "IDLXE_024",
                "IDLXE_012": "IDLXE_022",
            }
            vcx_idl_code = vcx_replacements.get(idl_code, idl_code)

        rate_info = fee_rates.loc[
            fee_rates["IDL Code"].apply(lambda x: vcx_idl_code in x if isinstance(x, list) else False) &
            ((fee_rates['Mục đích sử dụng'] == usage_purpose) | (fee_rates['Mục đích sử dụng'].isna())) &
            ((fee_rates['Giá trị xe tối thiểu'].isna()) | (fee_rates['Giá trị xe tối thiểu'] < vehicle_value)) &
            ((fee_rates['Giá trị xe tối đa'].isna()) | (fee_rates['Giá trị xe tối đa'] >= vehicle_value)) &
            ((fee_rates['Niên hạn tối thiểu'].isna()) | (fee_rates['Niên hạn tối thiểu'] < months_used)) &
            ((fee_rates['Niên hạn tối đa'].isna()) | (fee_rates['Niên hạn tối đa'] >= months_used)) &
            ((fee_rates['Số chỗ tối thiểu'].isna()) | (seat_capacity is None or fee_rates['Số chỗ tối thiểu'] <= seat_capacity)) &
            ((fee_rates['Số chỗ tối đa'].isna()) | (seat_capacity is None or fee_rates['Số chỗ tối đa'] >= seat_capacity)) &
            ((fee_rates['Trọng tải tối thiểu'].isna()) | (load_capacity is None or fee_rates['Trọng tải tối thiểu'] <= load_capacity)) &
            ((fee_rates['Trọng tải tối đa'].isna()) | (load_capacity is None or fee_rates['Trọng tải tối đa'] >= load_capacity))
        ]

        if rate_info.empty:
            continue

        applicable_rate = rate_info['Tỷ lệ phí (%)'].min()

        # Nếu là PVI và có months_used thì cộng thêm theo bảng điều chỉnh mới
        if insurance_company.lower() == "pvi" and months_used:
            if months_used <= 36:
                applicable_rate += 0
            elif 36 < months_used <= 72:
                applicable_rate += 0.1
            elif 72 < months_used <= 120:
                applicable_rate += 0.2
            elif 120 < months_used <= 180:
                applicable_rate += 0.3
            elif 180 < months_used <= 240:
                applicable_rate += 0.4

        if insurance_company.lower() == "vni" and idl_code in special_vni:
            applicable_rate += 0.1

        if insurance_company.lower() == "pvi" and idl_code in special_pvi and khau_hao_coverage:
            applicable_rate += 0.1

        if debug:
            print(f"[DEBUG] {insurance_company.upper()} - Tỷ lệ phí áp dụng: {applicable_rate:.2f}%")

        adjustment_factor = 1.0
        if insurance_company.lower() == "pvi":
            if 400000000 <= vehicle_value <= 700000000:
                adjustment_factor = 0.95
            elif 700000001 <= vehicle_value <= 1000000000:
                adjustment_factor = 0.7
            elif vehicle_value > 1000000000:
                adjustment_factor = 0.65


        if include_tnds:
            tnds_row = fee_rates_tnds.loc[
                fee_rates_tnds["IDL Code"].apply(lambda x: idl_code in x if isinstance(x, list) else False),
                "Phí bảo hiểm"
            ]
            tnds_fee = (
                4813000 + 30000 * max(seat_capacity - 25, 0)
                if idl_code in special_tnds and seat_capacity is not None
                else float(tnds_row.values[0]) if not tnds_row.empty else "Không mua"
            )
        else:
            tnds_fee = "Không mua"

        if include_tnnntx and seat_capacity:
            tnnntx_fee = 10000 * seat_capacity
        else:
            tnnntx_fee = "Không mua"

        tnnntx_type = "Quyền lợi chính" if tnds_fee == "Không mua" and include_tnnntx else "Quyền lợi phụ"

        vcx_fee = (applicable_rate / 100) * vehicle_value  if include_vcx else "Không mua"
        theft_fee = (theft_rate / 100) * vehicle_value if (include_vcx and theft_coverage) else "Không mua"

        khau_hao_value = "Miễn phí"
        if include_vcx and insurance_company.lower() == "pvi":
            matched_rows = rate_info
            code = matched_rows['PVI_code'].iloc[0] if 'PVI_code' in matched_rows.columns else None
            if code in pvi_depreciation_matrix and months_used is not None:
                if months_used <= 36:
                    index = 0
                elif months_used <= 72:
                    index = 1
                elif months_used <= 120:
                    index = 2
                elif months_used <= 180:
                    index = 3
                else:
                    index = 4
                khau_hao_rate = pvi_depreciation_matrix[code][index]
                khau_hao_value = (khau_hao_rate / 100 ) * vehicle_value if khau_hao_rate > 0 else "Miễn phí"

        lua_chon_cssc_value = "Miễn phí"
        if include_vcx and insurance_company.lower() == "pvi" and months_used is not None:
            if months_used <= 36:
                lua_chon_cssc_rate = 0.1
            elif months_used <= 72:
                lua_chon_cssc_rate = 0.2
            elif months_used <= 120:
                lua_chon_cssc_rate = 0.3
            else:
                lua_chon_cssc_rate = 0.5
            lua_chon_cssc_value = (lua_chon_cssc_rate / 100 ) * vehicle_value if lua_chon_cssc_rate > 0 else "Miễn phí"


        thuy_kich_value = "Miễn phí"
        if thuy_kich_coverage and insurance_company.lower() == "pvi":
            thuy_kich_value = (thuy_kich_rate / 100 ) * vehicle_value if thuy_kich_rate > 0 else "Miễn phí"


        total_fee = 0
        for fee in [tnds_fee, tnnntx_fee, vcx_fee, theft_fee, khau_hao_value if isinstance(khau_hao_value, (int, float)) else 0]:
            if isinstance(fee, float):
                total_fee += fee

        data = {
            "Trách nhiệm dân sự": tnds_fee,
            "Tai nạn NNTX": tnnntx_fee,
            "Vật chất xe": vcx_fee,
            "Mất cắp bộ phận": theft_fee,
            "Khấu hao thay mới": khau_hao_value,
            "Lựa chọn CSSC": lua_chon_cssc_value,
            "Thủy kích": thuy_kich_value,
            "Tổng phí bảo hiểm": format_currency(total_fee)
        }

        loai_quyen_loi = []
        for key in data:
            if key == "Trách nhiệm dân sự" and isinstance(tnds_fee, float):
                loai_quyen_loi.append("Quyền lợi chính")
            elif key == "Tai nạn NNTX":
                loai_quyen_loi.append(tnnntx_type)
            elif key == "Vật chất xe" and isinstance(vcx_fee, float):
                loai_quyen_loi.append("Quyền lợi chính")
            elif key == "Tổng phí bảo hiểm":
                loai_quyen_loi.append("")
            else:
                loai_quyen_loi.append("Quyền lợi phụ")

        result = pd.DataFrame(data.items(), columns=["Quyền lợi", insurance_company.upper()])
        result.insert(0, "Loại quyền lợi", loai_quyen_loi)
        all_results.append(result)

    if not all_results:
        return "Không tìm thấy dữ liệu phù hợp"

    final_df = pd.concat(all_results)
    pivot_df = final_df.pivot_table(
        index=["Loại quyền lợi", "Quyền lợi"],
        values=final_df.columns.drop(["Loại quyền lợi", "Quyền lợi"]),
        aggfunc="first"
    ).reset_index()

    priority_order = [
        "Tổng phí bảo hiểm",
        "Trách nhiệm dân sự",
        "Tai nạn NNTX",
        "Vật chất xe",
        "Mất cắp bộ phận",
        "Khấu hao thay mới",
        "Lựa chọn CSSC",
        "Thủy kích"
    ]
    pivot_df["Quyền lợi"] = pd.Categorical(pivot_df["Quyền lợi"], categories=priority_order, ordered=True)
    pivot_df = pivot_df.sort_values(["Quyền lợi"]).reset_index(drop=True)

    for col in pivot_df.columns[2:]:
        pivot_df[col] = pivot_df[col].apply(format_currency)

    return pivot_df

# Chọn dòng cần tính phí
dong_can_tinh_phi = 160
row = applications.iloc[dong_can_tinh_phi]

vehicle_value = row["vehicle_value"]
idl_code = row['idl_code']
usage_purpose = row["usage_purpose"]
seat_capacity = row["seat_capacity"]
load_capacity = row["load_capacity"]
first_registration_date = row['first_registration_date']
insurance_companies = row['insurance_company']
theft_coverage = row['rider_theft']
lua_chon_cssc_coverage = row['rider_cssc']
thuy_kich_coverage = row['rider_thuykich']
khau_hao_coverage = row['rider_khauhao']
include_tnds = row['ql_tnds']
include_vcx = row['ql_vcx']
include_tnnntx = row['ql_tnnntx']


# Call function (assumes calculate_vehicle_fee and fee_rates_xx are defined)
fee_table = calculate_vehicle_fee(
    vehicle_value, idl_code, usage_purpose, seat_capacity, load_capacity,
    first_registration_date, insurance_companies,
    theft_coverage, include_tnds, include_tnnntx,include_vcx,lua_chon_cssc_coverage,thuy_kich_coverage,khau_hao_coverage,debug=True
)

print(f"\n🔹 Kết quả tính phí cho dòng {dong_can_tinh_phi} trong sheet:\n")
display(fee_table)  # Ensure display is called as a function

print(
    vehicle_value,
    idl_code,
    usage_purpose,
    seat_capacity,
    load_capacity,
    first_registration_date,
    insurance_companies,
    theft_coverage,include_tnds,include_tnnntx,include_vcx
)

row = applications.iloc[160]

v = float(str(row["vehicle_value"]).replace(",", "").replace(".", ""))
m = (datetime.today().year - pd.to_datetime(row["first_registration_date"]).year) * 12 + (datetime.today().month - pd.to_datetime(row["first_registration_date"]).month)
idl = row["idl_code"]
usage = str(row["usage_purpose"]).lower()

# Lọc theo điều kiện
r = fee_rates_vni[
    fee_rates_vni["IDL Code"].apply(lambda x: idl in x if isinstance(x, list) else False) &
    ((fee_rates_vni["Mục đích sử dụng"].str.lower() == usage) | fee_rates_vni["Mục đích sử dụng"].isna()) &
    ((fee_rates_vni["Giá trị xe tối thiểu"].isna()) | (fee_rates_vni["Giá trị xe tối thiểu"] < v)) &
    ((fee_rates_vni["Giá trị xe tối đa"].isna()) | (fee_rates_vni["Giá trị xe tối đa"] >= v)) &
    ((fee_rates_vni["Niên hạn tối thiểu"].isna()) | (fee_rates_vni["Niên hạn tối thiểu"] < m)) &
    ((fee_rates_vni["Niên hạn tối đa"].isna()) | (fee_rates_vni["Niên hạn tối đa"] >= m))
]

# In dòng được áp dụng (nếu có)
if not r.empty:
    selected_row = r.loc[r["Tỷ lệ phí (%)"] == r["Tỷ lệ phí (%)"].min()].iloc[0]
    print("✅ Dòng áp dụng:")
    print(selected_row[["Giá trị xe tối thiểu", "Giá trị xe tối đa", "Niên hạn tối thiểu", "Niên hạn tối đa", "Tỷ lệ phí (%)"]])
else:
    print("❌ Không tìm thấy dòng nào phù hợp.")

import time

# Biến theo dõi số dòng hiện tại trong Sheet
previous_row_count = len(worksheet.get_all_values())

while True:
    values = worksheet.get_all_values()
    current_row_count = len(values)

    if current_row_count > previous_row_count:
        print(f"🔔 Phát hiện {current_row_count - previous_row_count} dòng mới!")

        # Lấy dữ liệu mới
        new_rows = values[previous_row_count:]
        new_df = pd.DataFrame(new_rows, columns=header)

        # Gộp vào DataFrame chính nếu muốn
        applications = pd.concat([applications, new_df], ignore_index=True)

        # Cập nhật lại số dòng
        previous_row_count = current_row_count

        # Xử lý thêm ở đây nếu cần...

    else:
        print("⏳ Không có dòng mới.")

    time.sleep(10)  # chờ 60 giây trước khi kiểm tra lại

# !sudo dpkg --configure -a


from google.colab import files
uploaded = files.upload()

from docx import Document
import re
import subprocess




# 🔁 Thay thế {{...}} từ 1 dòng ứng dụng (row_data)
def replace_placeholders_in_cell(cell, row_data):
    for para in cell.paragraphs:
        full_text = para.text
        for key, val in row_data.items():
            full_text = full_text.replace(f"{{{{{key}}}}}", str(val))
        para.clear()  # Xóa các run cũ tránh bị đè, lặp
        para.add_run(full_text)


# 🔁 Thay thế {{bmi_3}}, {{pvi_4}}, {{vni_2}} từ bảng phí
def replace_fee_placeholders(doc, fee_table):
    pattern = r"{{(\w+)_(\d+)}}"  # Ví dụ: {{bmi_3}}, {{vni_4}}
    for table in doc.tables:
        for row in table.rows:
            for cell in row.cells:
                for para in cell.paragraphs:
                    full_text = para.text
                    matches = re.findall(pattern, full_text)
                    for col_raw, idx in matches:
                        col = col_raw.upper()
                        try:
                            val = str(fee_table[col].iloc[int(idx)])
                        except:
                            val = ""
                        full_text = full_text.replace(f"{{{{{col_raw}_{idx}}}}}", val)
                    para.clear()
                    para.add_run(full_text)


# ✅ Hàm tổng hợp xử lý file Word
def generate_doc(template_path, output_docx, applications, index, calculate_vehicle_fee):
    row = applications.loc[index]
    row_data = row.to_dict()

    # Tính bảng phí
    fee_table = calculate_vehicle_fee(
        vehicle_value=row["vehicle_value"],
        idl_code=row["idl_code"],
        usage_purpose=row["usage_purpose"],
        seat_capacity=row["seat_capacity"],
        load_capacity=row["load_capacity"],
        first_registration_date=row["first_registration_date"],
        insurance_companies=row["insurance_company"],
        theft_coverage=row["rider_theft"],
        include_tnds=row["ql_tnds"],
        include_tnnntx=row["ql_tnnntx"],
        include_vcx=row["ql_vcx"],
        lua_chon_cssc_coverage=row["rider_cssc"],
        thuy_kich_coverage=row["rider_thuykich"],
        khau_hao_coverage=row["rider_khauhao"],
        debug=False
    )

    # Load template
    doc = Document(template_path)

    for table in doc.tables:
        for row in table.rows:
            for cell in row.cells:
                replace_placeholders_in_cell(cell, row_data)

    replace_fee_placeholders(doc, fee_table)

    # Save .docx
    doc.save(output_docx)
    print("✅ Đã tạo file Word:", output_docx)

    # Convert to PDF bằng LibreOffice
    # convert_docx_to_pdf("Thong_Bao_Phi_Hoan_Chinh.docx")


    # print("✅ Đã tạo file PDF:", output_pdf)

generate_doc(
    template_path="Template final.docx",
    output_docx="Thong_Bao_Phi_Hoan_Chinh.docx",
    applications=applications,
    index=160,
    calculate_vehicle_fee=calculate_vehicle_fee
)

import smtplib
from email.message import EmailMessage

# ===== CẤU HÌNH =====
sender_email = "nguyen.thuylinh.070101@gmail.com"              # Gmail bạn dùng để gửi
receiver_email = ["nguyen.thuylinh.070101@gmail.com",'linh.nguyen@izion24.com.vn']        # Email người nhận
app_password = "yhhb vjsl pobw wmih"            # App Password 16 ký tự

# ===== NỘI DUNG EMAIL =====
msg = EmailMessage()
msg['Subject'] = 'Bảng phí mới đã được tính toán'
msg['From'] = sender_email
msg['To'] = receiver_email
msg.set_content('Vui lòng kiểm tra file đính kèm là bảng phí vừa được tính.')

# ===== FILE ĐÍNH KÈM =====
# fee_table.to_csv("bang_phi_moi.csv", index=False)
file_path = "Thong_Bao_Phi_Hoan_Chinh.docx"  # Đặt tên đúng theo file bạn muốn gửi

with open(file_path, 'rb') as f:
    file_data = f.read()
    msg.add_attachment(file_data, maintype='application', subtype='octet-stream', filename=file_path)

# ===== GỬI EMAIL =====
with smtplib.SMTP_SSL('smtp.gmail.com', 465) as smtp:
    smtp.login(sender_email, app_password)
    smtp.send_message(msg)

print("✅ Đã gửi email kèm file thành công.")